version: '3.8'

services:
  # Frontend
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile.prod
      target: production
    container_name: bess-pro-frontend
    restart: unless-stopped
    ports:
      - "3003:80"
    environment:
      - NODE_ENV=production
    networks:
      - bess-prod-network
    depends_on:
      - backend

  # Backend
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile.prod
      target: production
    container_name: bess-pro-backend
    restart: unless-stopped
    ports:
      - "8010:8010"
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    networks:
      - bess-prod-network
    depends_on:
      - mongodb
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB ARM64
  mongodb:
    image: mongo:7.0
    container_name: bess-pro-mongodb
    platform: linux/arm64
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-your-secure-password}
      MONGO_INITDB_DATABASE: bess-pro-prod
    volumes:
      - mongodb_prod_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - bess-prod-network

  # Redis ARM64
  redis:
    image: redis:7.2-alpine
    container_name: bess-pro-redis
    platform: linux/arm64
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-your-redis-password}
    volumes:
      - redis_prod_data:/data
    networks:
      - bess-prod-network

volumes:
  mongodb_prod_data:
  mongodb_config:
  redis_prod_data:
  uploads:
  logs:

networks:
  bess-prod-network:
    driver: bridge
