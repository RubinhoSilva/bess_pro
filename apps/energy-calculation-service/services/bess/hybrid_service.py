"""
Servi√ßo orquestrador para c√°lculo de sistemas H√çBRIDOS (Solar + BESS)

Este servi√ßo integra:
1. C√°lculo de gera√ß√£o solar (reutiliza SolarCalculationService existente)
2. Gera√ß√£o de perfil de consumo hor√°rio
3. Simula√ß√£o de opera√ß√£o do BESS
4. An√°lise financeira integrada

√â o ponto de entrada principal para an√°lise de sistemas h√≠bridos.
"""

import logging
import numpy as np
from typing import Dict, Any
from datetime import datetime
from calendar import monthrange

# Importar servi√ßos existentes
from services.solar.solar_service import SolarCalculationService
from services.bess.simulation_service import bess_simulation_service
from services.shared.hybrid_financial_service import hybrid_financial_service

# Importar modelos
from models.bess.hybrid_requests import HybridDimensioningRequest
from models.bess.hybrid_responses import HybridDimensioningResponse
from models.bess.requests import PerfilConsumo

logger = logging.getLogger(__name__)


class HybridDimensioningService:
    """
    Servi√ßo orquestrador para an√°lise de sistemas h√≠bridos Solar + BESS

    Fluxo de execu√ß√£o:
    1. Calcula gera√ß√£o solar (PVLIB ModelChain)
    2. Gera perfil de consumo hor√°rio
    3. Simula opera√ß√£o do BESS
    4. Calcula an√°lise financeira integrada
    5. Compara cen√°rios (sem sistema, s√≥ solar, s√≥ BESS, h√≠brido)
    """

    def __init__(self):
        """Inicializa o servi√ßo de dimensionamento h√≠brido"""
        self.solar_service = SolarCalculationService()
        logger.info("Inicializando HybridDimensioningService")

    def calculate_hybrid_system(
        self,
        request: HybridDimensioningRequest
    ) -> HybridDimensioningResponse:
        """
        Calcula sistema h√≠brido completo

        Este m√©todo orquestra todas as etapas:
        - Gera√ß√£o solar (c√≥digo existente)
        - Simula√ß√£o BESS
        - An√°lise financeira

        Args:
            request: Par√¢metros do sistema h√≠brido

        Returns:
            HybridDimensioningResponse com resultados completos
        """

        logger.info("=" * 100)
        logger.info("üîã‚ö° IN√çCIO DO C√ÅLCULO DE SISTEMA H√çBRIDO SOLAR + BESS")
        logger.info("=" * 100)

        try:
            # =================================================================
            # ETAPA 1: CALCULAR SISTEMA SOLAR (REUTILIZAR C√ìDIGO EXISTENTE)
            # =================================================================
            # Usa o SolarCalculationService que j√° implementa PVLIB ModelChain
            # Retorna: gera√ß√£o mensal, gera√ß√£o anual, performance ratio, etc.

            logger.info("\nüåû ETAPA 1/5: Calculando gera√ß√£o solar com PVLIB...")
            logger.info(f"   Localiza√ß√£o: ({request.sistema_solar.lat}, {request.sistema_solar.lon})")
            logger.info(f"   M√≥dulos: {request.sistema_solar.modulo.fabricante} {request.sistema_solar.modulo.modelo}")

            # Chamar servi√ßo solar existente
            solar_result = self.solar_service.calculate(request.sistema_solar)

            # Extrair dados importantes
            geracao_anual_kwh = solar_result["energia_anual_kwh"]
            geracao_mensal_kwh_dict = solar_result["geracao_mensal_kwh"]
            potencia_solar_kwp = solar_result["potencia_total_kwp"]

            # Converter geracao_mensal de dict para lista ordenada [Jan, Fev, ..., Dez]
            meses_ordem = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun",
                          "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
            geracao_mensal_kwh = [geracao_mensal_kwh_dict[mes] for mes in meses_ordem]

            logger.info(f"‚úÖ Sistema solar calculado:")
            logger.info(f"   - Pot√™ncia: {potencia_solar_kwp:.2f} kWp")
            logger.info(f"   - Gera√ß√£o anual: {geracao_anual_kwh:.0f} kWh/ano")
            logger.info(f"   - Performance Ratio: {solar_result.get('pr_total', 0):.1f}%")

            # =================================================================
            # ETAPA 2: GERAR PERFIL DE CONSUMO HOR√ÅRIO (8760 HORAS)
            # =================================================================
            # Transformar consumo mensal em curva hor√°ria usando perfil t√≠pico

            logger.info("\nüìä ETAPA 2/5: Gerando perfil de consumo hor√°rio...")

            # Usar perfil fornecido ou padr√£o comercial
            perfil = request.perfil_consumo or PerfilConsumo(tipo="comercial")

            # Extrair consumo mensal do request solar
            consumo_mensal_kwh = request.sistema_solar.consumo_mensal_kwh

            # Gerar curva hor√°ria (8760 valores em W)
            curva_consumo_w = self._generate_hourly_consumption(
                consumo_mensal_kwh, perfil
            )

            consumo_anual_kwh = sum(consumo_mensal_kwh)
            logger.info(f"‚úÖ Perfil de consumo gerado:")
            logger.info(f"   - Consumo anual: {consumo_anual_kwh:.0f} kWh")
            logger.info(f"   - Perfil: {perfil.tipo}")

            # =================================================================
            # ETAPA 3: GERAR CURVA DE GERA√á√ÉO SOLAR HOR√ÅRIA
            # =================================================================
            # Distribuir gera√ß√£o mensal em curva hor√°ria usando perfil solar t√≠pico

            logger.info("\n‚òÄÔ∏è  ETAPA 3/5: Gerando curva solar hor√°ria...")

            curva_geracao_solar_w = self._generate_hourly_solar_generation(
                geracao_mensal_kwh
            )

            logger.info(f"‚úÖ Curva solar hor√°ria gerada (8760 pontos)")

            # =================================================================
            # ETAPA 4: SIMULAR OPERA√á√ÉO DO BESS
            # =================================================================
            # Simula comportamento hora a hora do BESS considerando:
            # - Gera√ß√£o solar vs consumo
            # - Estrat√©gia de opera√ß√£o
            # - Limites f√≠sicos da bateria

            logger.info("\nüîã ETAPA 4/5: Simulando opera√ß√£o do BESS...")
            logger.info(f"   - Capacidade: {request.capacidade_kwh} kWh")
            logger.info(f"   - Pot√™ncia: {request.potencia_kw} kW")
            logger.info(f"   - Estrat√©gia: {request.estrategia}")

            # Montar par√¢metros da bateria
            parametros_bateria = {
                "eficiencia_roundtrip": request.eficiencia_roundtrip,
                "soc_inicial": request.soc_inicial,
                "soc_min": request.soc_minimo,
                "soc_max": request.soc_maximo,
                "dod_max": request.profundidade_descarga_max,
            }

            # Chamar simula√ß√£o BESS
            bess_result = bess_simulation_service.simulate_annual_operation(
                capacidade_kwh=request.capacidade_kwh,
                potencia_kw=request.potencia_kw,
                curva_geracao_solar_w=curva_geracao_solar_w,
                curva_consumo_w=curva_consumo_w,
                tarifa=request.tarifa,
                estrategia=request.estrategia,
                parametros_bateria=parametros_bateria,
                limite_demanda_kw=request.limite_demanda_kw
            )

            logger.info(f"‚úÖ Simula√ß√£o BESS conclu√≠da:")
            logger.info(f"   - Ciclos equivalentes: {bess_result['ciclos_equivalentes_ano']:.1f}")
            logger.info(f"   - Economia anual: R$ {bess_result['economia_total_anual_reais']:,.2f}")
            logger.info(f"   - SOC m√©dio: {bess_result['soc_medio_percentual']:.1f}%")

            # =================================================================
            # ETAPA 5: AN√ÅLISE FINANCEIRA INTEGRADA
            # =================================================================
            # Calcula m√©tricas econ√¥micas e compara cen√°rios

            logger.info("\nüí∞ ETAPA 5/5: Calculando an√°lise financeira integrada...")

            # Calcular investimento solar (simplificado)
            # Custo t√≠pico: R$ 4.000-6.000/kWp (m√©dia R$ 5.000)
            investimento_solar = potencia_solar_kwp * 5000.0

            # Calcular investimento BESS
            # F√≥rmula: (Capacidade √ó Custo/kWh) + (Pot√™ncia √ó Custo/kW) + Instala√ß√£o
            investimento_bess = (
                request.capacidade_kwh * request.custo_kwh_bateria +
                request.potencia_kw * request.custo_kw_inversor_bess +
                request.custo_instalacao_bess
            )

            logger.info(f"   - Investimento solar: R$ {investimento_solar:,.2f}")
            logger.info(f"   - Investimento BESS: R$ {investimento_bess:,.2f}")
            logger.info(f"   - Investimento total: R$ {(investimento_solar + investimento_bess):,.2f}")

            # Calcular tarifa m√©dia ponderada
            tarifa_media_kwh = self._calcular_tarifa_media(request.tarifa)

            # Chamar an√°lise financeira
            analise_hibrida = hybrid_financial_service.analyze_hybrid_system(
                solar_result=solar_result,
                bess_result=bess_result,
                investimento_solar=investimento_solar,
                investimento_bess=investimento_bess,
                consumo_mensal=consumo_mensal_kwh,
                tarifa_media_kwh=tarifa_media_kwh,
                taxa_desconto=request.taxa_desconto,
                vida_util_anos=request.vida_util_anos
            )

            logger.info(f"‚úÖ An√°lise financeira conclu√≠da:")
            logger.info(f"   - VPL h√≠brido: R$ {analise_hibrida['retorno_financeiro']['npv_reais']:,.2f}")
            logger.info(f"   - TIR: {analise_hibrida['retorno_financeiro']['tir_percentual']:.1f}%")
            logger.info(f"   - Payback: {analise_hibrida['retorno_financeiro']['payback_simples_anos']:.1f} anos")
            logger.info(f"   - Autossufici√™ncia: {analise_hibrida['autossuficiencia']['autossuficiencia_percentual']:.1f}%")

            # =================================================================
            # ETAPA 6: MONTAR RESPOSTA FINAL
            # =================================================================

            logger.info("\n" + "=" * 100)
            logger.info("‚úÖ C√ÅLCULO H√çBRIDO CONCLU√çDO COM SUCESSO")
            logger.info("=" * 100 + "\n")

            return HybridDimensioningResponse(
                sistema_solar=solar_result,
                sistema_bess=bess_result,
                analise_hibrida=analise_hibrida,
                series_temporais=None  # Opcional: pode incluir s√©ries temporais se necess√°rio
            )

        except Exception as e:
            logger.error(f"‚ùå Erro no c√°lculo h√≠brido: {e}", exc_info=True)
            raise

    # =========================================================================
    # M√âTODOS AUXILIARES
    # =========================================================================

    def _generate_hourly_consumption(
        self,
        consumo_mensal_kwh: list,
        perfil: PerfilConsumo
    ) -> np.ndarray:
        """
        Gera curva de consumo hor√°rio (8760 valores) a partir do consumo mensal

        Args:
            consumo_mensal_kwh: Lista com consumo de cada m√™s [Jan, Fev, ..., Dez]
            perfil: Perfil de consumo (com curva hor√°ria t√≠pica)

        Returns:
            Array numpy com 8760 valores de consumo em Watts
        """

        # Obter curva hor√°ria t√≠pica do perfil
        # Se n√£o fornecida, usar perfil comercial padr√£o
        if perfil.curva_horaria:
            # Curva fornecida: 24 valores em % do consumo di√°rio
            curva_24h = np.array(perfil.curva_horaria) / 100.0  # Normalizar
        else:
            # Usar perfil padr√£o comercial (exemplo)
            # Hor√°rio comercial: picos 10h-12h e 14h-17h
            curva_24h = np.array([
                0.02, 0.015, 0.01, 0.01, 0.015, 0.025, 0.04, 0.055, 0.06, 0.055,
                0.05, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.07, 0.06,
                0.05, 0.04, 0.03, 0.025
            ])

        # Garantir que soma = 1.0
        curva_24h = curva_24h / curva_24h.sum()

        # Gerar consumo hora a hora para o ano
        curva_anual_w = []

        # Ano t√≠pico: 2023 (n√£o bissexto)
        for mes_idx, consumo_mes_kwh in enumerate(consumo_mensal_kwh):
            # N√∫mero de dias no m√™s (mes_idx: 0=Jan, 1=Fev, ...)
            dias_no_mes = monthrange(2023, mes_idx + 1)[1]

            # Consumo m√©dio di√°rio do m√™s (kWh/dia)
            consumo_diario_kwh = consumo_mes_kwh / dias_no_mes

            # Para cada dia do m√™s
            for dia in range(dias_no_mes):
                # Aplicar curva hor√°ria
                # Consumo de cada hora = consumo_diario √ó % da hora
                consumo_dia_horario = consumo_diario_kwh * curva_24h  # Array 24 valores em kWh

                # Converter kWh para W (m√©dia da hora)
                # 1 kWh = 1000 W durante 1 hora
                consumo_dia_w = consumo_dia_horario * 1000.0  # Array 24 valores em W

                curva_anual_w.extend(consumo_dia_w)

        return np.array(curva_anual_w)

    def _generate_hourly_solar_generation(
        self,
        geracao_mensal_kwh: list
    ) -> np.ndarray:
        """
        Gera curva de gera√ß√£o solar hor√°ria (8760 valores) a partir da gera√ß√£o mensal

        Usa curva solar t√≠pica: gera√ß√£o concentrada das 7h √†s 17h

        Args:
            geracao_mensal_kwh: Lista com gera√ß√£o de cada m√™s [Jan, Fev, ..., Dez]

        Returns:
            Array numpy com 8760 valores de gera√ß√£o em Watts
        """

        # Curva solar t√≠pica (24 horas)
        # Gera√ß√£o concentrada no per√≠odo diurno (7h-17h)
        # Formato: % da gera√ß√£o di√°ria em cada hora
        curva_solar_24h = np.array([
            0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  # 0h-5h: noite
            0.01, 0.03, 0.06, 0.09, 0.11, 0.12,  # 6h-11h: manh√£ crescente
            0.13, 0.12, 0.11, 0.09, 0.07, 0.04,  # 12h-17h: tarde decrescente
            0.02, 0.00, 0.00, 0.00, 0.00, 0.00   # 18h-23h: noite
        ])

        # Normalizar para somar 1.0
        curva_solar_24h = curva_solar_24h / curva_solar_24h.sum()

        # Gerar gera√ß√£o hora a hora para o ano
        curva_anual_w = []

        for mes_idx, geracao_mes_kwh in enumerate(geracao_mensal_kwh):
            # N√∫mero de dias no m√™s
            dias_no_mes = monthrange(2023, mes_idx + 1)[1]

            # Gera√ß√£o m√©dia di√°ria do m√™s (kWh/dia)
            geracao_diaria_kwh = geracao_mes_kwh / dias_no_mes

            # Para cada dia do m√™s
            for dia in range(dias_no_mes):
                # Aplicar curva solar hor√°ria
                geracao_dia_horaria = geracao_diaria_kwh * curva_solar_24h  # kWh

                # Converter kWh para W
                geracao_dia_w = geracao_dia_horaria * 1000.0  # W

                curva_anual_w.extend(geracao_dia_w)

        return np.array(curva_anual_w)

    def _calcular_tarifa_media(self, tarifa) -> float:
        """
        Calcula tarifa m√©dia ponderada

        Args:
            tarifa: Estrutura TarifaEnergia

        Returns:
            Tarifa m√©dia em R$/kWh
        """

        if tarifa.tipo == "branca":
            # Tarifa branca: m√©dia ponderada (assumindo 3h ponta, 2h intermedi√°ria, 19h fora-ponta)
            ponta = tarifa.tarifa_ponta_kwh or 0
            intermediaria = tarifa.tarifa_intermediaria_kwh or 0
            fora_ponta = tarifa.tarifa_fora_ponta_kwh or 0

            media = (ponta * 3 + intermediaria * 2 + fora_ponta * 19) / 24
            return media

        else:
            # Convencional/Verde/Azul: usar fora-ponta como refer√™ncia
            return tarifa.tarifa_fora_ponta_kwh or tarifa.tarifa_ponta_kwh or 0.75


# Inst√¢ncia singleton
hybrid_dimensioning_service = HybridDimensioningService()
