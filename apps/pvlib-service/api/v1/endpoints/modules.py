from fastapi import APIRouter, Depends, HTTPException, Query
import logging

from models.requests import ModuleCalculationRequest
from models.responses import ModuleCalculationResponse, ErrorResponse
from services import module_service
from core.exceptions import SolarAPIException
from api.dependencies import rate_limit_dependency, log_request_dependency

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/modules", tags=["C√°lculo de M√≥dulos"])

@router.post(
    "/calculate",
    response_model=ModuleCalculationResponse,
    responses={
        422: {"model": ErrorResponse, "description": "Erro de valida√ß√£o"},
        502: {"model": ErrorResponse, "description": "Erro PVGIS"},
        500: {"model": ErrorResponse, "description": "Erro interno"}
    },
    summary="C√°lculo avan√ßado de m√≥dulos fotovoltaicos com dados completos",
    description="""
    Calcula o n√∫mero de m√≥dulos fotovoltaicos necess√°rios usando dados completos do m√≥dulo e inversor.
    
    **Processo de c√°lculo:**
    1. Busca dados meteorol√≥gicos hist√≥ricos (16 anos)
    2. Faz decomposi√ß√£o GHI ‚Üí DNI/DHI usando modelo especificado
    3. Executa simula√ß√£o completa com ModelChain usando par√¢metros reais do equipamento
    4. Calcula m√©dia anual e variabilidade considerando perdas do sistema
    5. Dimensiona sistema com fator de seguran√ßa aplicado
    
    **An√°lises avan√ßadas:**
    - Compatibilidade entre m√≥dulo e inversor (tens√£o, corrente, MPPT)
    - C√°lculo de strings e m√≥dulos por string otimizado
    - √Årea necess√°ria baseada nas dimens√µes reais do m√≥dulo
    - Peso total do sistema
    - Economia de CO2 estimada
    - Utiliza√ß√£o e margem de seguran√ßa do inversor
    
    **Dados de entrada:**
    - M√≥dulo: fabricante, modelo, pot√™ncia, dimens√µes, caracter√≠sticas el√©tricas, coeficientes de temperatura
    - Inversor: fabricante, modelo, pot√™ncia CA/CC, MPPT, faixas de tens√£o, efici√™ncia
    - Sistema: consumo, localiza√ß√£o, orienta√ß√£o, perdas, fator de seguran√ßa
    
    **Considera√ß√µes t√©cnicas:**
    - Usa par√¢metros reais dos equipamentos para simula√ß√£o precisa
    - Considera coeficientes de temperatura espec√≠ficos do m√≥dulo
    - Aplica perdas configur√°veis do sistema
    - An√°lise de compatibilidade t√©cnica detalhada
    """
)
async def calculate_required_modules(
    request: ModuleCalculationRequest,
    _: None = Depends(rate_limit_dependency),
    req_log: None = Depends(log_request_dependency)
):
    """Calcula m√≥dulos fotovoltaicos necess√°rios"""
    
    try:
        logger.info(f"Calculando m√≥dulos para {request.lat}, {request.lon} - "
                   f"{request.modulo.fabricante} {request.modulo.modelo} {request.modulo.potencia_nominal_w}W, "
                   f"{request.consumo_anual_kwh} kWh/ano")
        
        # ===== DEBUG: JSON COMPLETO RECEBIDO NO PYTHON =====
        import json
        print("=" * 80)
        print("üêç [PYTHON - modules.py] JSON COMPLETO RECEBIDO:")
        print("=" * 80)
        
        # Converter request para dict para visualiza√ß√£o completa
        try:
            request_dict = request.dict() if hasattr(request, 'dict') else request.__dict__
            print(json.dumps(request_dict, indent=2, ensure_ascii=False, default=str))
        except Exception as e:
            print(f"Erro ao serializar request: {e}")
            print(f"Request type: {type(request)}")
            print(f"Request attributes: {dir(request)}")
        
        print("=" * 80)
        print("üêç [PYTHON - modules.py] RESUMO DADOS PRINCIPAIS:")
        print(f"üîß PERDAS DO SISTEMA: {request.perdas_sistema}%")
        print(f"üìä CONSUMO ANUAL: {request.consumo_anual_kwh} kWh")
        print(f"üìç COORDENADAS: {request.lat}, {request.lon}")
        print(f"üîã M√ìDULO: {request.modulo.fabricante} {request.modulo.modelo} - {request.modulo.potencia_nominal_w}W")
        print(f"‚ö° INVERSOR: {request.inversor.fabricante} {request.inversor.modelo} - {request.inversor.potencia_saida_ca_w}W")
        if hasattr(request, 'num_modules') and request.num_modules:
            print(f"üßÆ N√öMERO ESPEC√çFICO DE M√ìDULOS: {request.num_modules}")
        print("=" * 80)
        
        result = module_service.calculate_required_modules(request)
        
        logger.info(f"C√°lculo conclu√≠do: {result.num_modulos} m√≥dulos, "
                   f"{result.potencia_total_kw} kWp")
        
        return result
        
    except SolarAPIException:
        raise
    except Exception as e:
        logger.error(f"Erro inesperado no c√°lculo de m√≥dulos: {e}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail="Erro interno no servidor. Tente novamente."
        )

