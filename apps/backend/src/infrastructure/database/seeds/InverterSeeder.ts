import { InverterModel } from '../mongodb/schemas/InverterSchema';
import { MANUFACTURER_IDS, getManufacturerId, ManufacturerKey } from './ManufacturerIds';
import { SystemUsers } from '../../../domain/constants/SystemUsers';

export class InverterSeeder {
  static async seed(): Promise<void> {
    console.log('üå± Iniciando cria√ß√£o de inversores...');

    const invertersData = [
      {
        manufacturerId: getManufacturerId('CHINT' as ManufacturerKey),
        modelo: 'CPS SCA3.6KTL-PS2/EU',
        tipoRede: 'bifasico-220v',
        potenciaSaidaCA: 6120, //Pot√™ncia Nominal CA (W)
        potenciaMaxima: 6120, //Pot√™ncia FV Max (W)
        correnteEntradaMax: 20, //Corrente Entrada M√°x (A)
        numeroMppt: 1, //N√∫mero de MPPTs
        stringsPorMppt: 1, //Strings por MPPT
        tensaoCcMax: 500, // Tens√£o CC M√°x (V)
        eficienciaMaxima: 97.3,
        potenciaAparenteMax: 3600, //Pot√™ncia Aparente M√°x (VA)
      },
      {
        manufacturerId: getManufacturerId('CHINT' as ManufacturerKey),
        modelo: 'CPS SCA7.5KTL-PSM/EU',
        tipoRede: 'bifasico-220v',
        potenciaSaidaCA: 7500, //Pot√™ncia Nominal CA (W)
        potenciaMaxima: 12750, //Pot√™ncia FV Max (W)
        correnteEntradaMax: 40, //Corrente Entrada M√°x (A)
        numeroMppt: 2, //N√∫mero de MPPTs
        stringsPorMppt: 2, //Strings por MPPT
        tensaoCcMax: 550, // Tens√£o CC M√°x (V)
        eficienciaMaxima: 97.7,
        potenciaAparenteMax: 7500, //Pot√™ncia Aparente M√°x (VA)
      },
      {
        manufacturerId: getManufacturerId('CHINT' as ManufacturerKey),
        modelo: 'SCA75K-T-SA',
        tipoRede: 'bifasico-220v',
        potenciaSaidaCA: 75000, //Pot√™ncia Nominal CA (W)
        potenciaMaxima: 150000, //Pot√™ncia FV Max (W)
        correnteEntradaMax: 45, //Corrente Entrada M√°x (A)
        numeroMppt: 9, //N√∫mero de MPPTs
        stringsPorMppt: 2, //Strings por MPPT
        tensaoCcMax: 1100, // Tens√£o CC M√°x (V)
        eficienciaMaxima: 98.41,
        potenciaAparenteMax: 75000, //Pot√™ncia Aparente M√°x (VA)
      },
    ];

    console.log(`üå± Verificando ${invertersData.length} inversores padr√£o...`);

    let createdCount = 0;
    let existingCount = 0;

    for (const inverterData of invertersData) {
      try {
        // ‚úÖ N√£o precisa mais buscar por nome - ID j√° est√° dispon√≠vel diretamente!
        const manufacturerId = inverterData.manufacturerId;

        // Verificar se o inversor padr√£o j√° existe
        const existing = await InverterModel.findOne({
          modelo: inverterData.modelo,
          manufacturerId,
          teamId: SystemUsers.PUBLIC_EQUIPMENT
        });

        if (existing) {
          existingCount++;
          console.log(`‚è≠Ô∏è  Inversor j√° existe: ${inverterData.modelo} ${inverterData.modelo} (Manufacturer ID: ${manufacturerId})`);
        } else {
          // Criar o inversor com o manufacturerId e teamId padr√£o
          const inverterToCreate = {
            ...inverterData,
            teamId: SystemUsers.PUBLIC_EQUIPMENT // ID padr√£o para equipamentos p√∫blicos
          };

          await InverterModel.create(inverterToCreate);
          createdCount++;
          console.log(`‚úÖ Inversor criado: ${inverterData.modelo} ${inverterData.modelo} (Manufacturer ID: ${manufacturerId})`);
        }
      } catch (error: any) {
        console.error(`‚ùå Erro ao processar inversor ${inverterData.modelo}:`, error.message);
      }
    }

    console.log(`üéâ Inverter seeding completed! Created: ${createdCount}, Already existed: ${existingCount}`);
  }
}